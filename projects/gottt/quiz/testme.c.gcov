        -:    0:Source:testme.c
        -:    0:Graph:testme.gcno
        -:    0:Data:testme.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<string.h>
        -:    3:#include<stdlib.h>
        -:    4:#include<time.h>
        -:    5:
function inputChar called 46360 returned 100% blocks executed 100%
    46360:    6:char inputChar()
        -:    7:{
        -:    8:	char nextChar;
        -:    9:
    46360:   10:	nextChar = (rand() % 94 + 32);
call    0 returned 100%
        -:   11:
        -:   12:	// TODO: rewrite this function
    46360:   13:    return nextChar;
        -:   14:}
        -:   15:
function inputString called 46360 returned 100% blocks executed 100%
    46360:   16:char *inputString()
        -:   17:{
    46360:   18:	char letters[15] = "rsseettrypoiu";
    46360:   19:	char* ptr = malloc(10);
        -:   20:
        -:   21:
    46360:   22:	int len = 5;
        -:   23:	
        -:   24:	int i;
   278160:   25:	for (i = 0; i < len; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   26:	{
   231800:   27:		ptr[i] = letters[(rand() % 15)];
call    0 returned 100%
        -:   28:	}
        -:   29:	
        -:   30:	
        -:   31:	// TODO: rewrite this function
    46360:   32:    return ptr;
        -:   33:}
        -:   34:
function testme called 1 returned 100% blocks executed 100%
        1:   35:void testme()
        -:   36:{
        1:   37:  int tcCount = 0;
        -:   38:  char *s;
        -:   39:  char c;
        1:   40:  int state = 0;
        1:   41:  int loop = 1;
    46362:   42:  while (loop)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   43:  {
    46360:   44:    tcCount++;
    46360:   45:    c = inputChar();
call    0 returned 100%
    46360:   46:    s = inputString();
call    0 returned 100%
    46360:   47:    printf("Iteration %d: c = %c, s = %s, state = %d\n", tcCount, c, s, state);
call    0 returned 100%
        -:   48:
    46360:   49:    if (c == '[' && state == 0) state = 1;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    46360:   50:    if (c == '(' && state == 1) state = 2;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    46360:   51:    if (c == '{' && state == 2) state = 3;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    46360:   52:    if (c == ' '&& state == 3) state = 4;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    46360:   53:    if (c == 'a' && state == 4) state = 5;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    46360:   54:    if (c == 'x' && state == 5) state = 6;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    46360:   55:    if (c == '}' && state == 6) state = 7;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    46360:   56:    if (c == ')' && state == 7) state = 8;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    46360:   57:    if (c == ']' && state == 8) state = 9;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    46360:   58:    if (s[0] == 'r' && s[1] == 'e'
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
branch  2 taken 13% (fallthrough)
branch  3 taken 87%
      803:   59:       && s[2] == 's' && s[3] == 'e'
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
branch  2 taken 16% (fallthrough)
branch  3 taken 84%
       18:   60:       && s[4] == 't' && s[5] == '\0'
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   61:       && state == 9)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   62:    {
        1:   63:      printf("error \n");
call    0 returned 100%
        1:   64:	  loop = 0;
        -:   65:      //exit(200);
        -:   66:    }
        -:   67:  }
        1:   68:}
        -:   69:
        -:   70:
function main called 1 returned 100% blocks executed 100%
        1:   71:int main(int argc, char *argv[])
        -:   72:{
        1:   73:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   74:    testme();
call    0 returned 100%
        1:   75:    return 0;
        -:   76:}
