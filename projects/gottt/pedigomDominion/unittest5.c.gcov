        -:    0:Source:unittest5.c
        -:    0:Graph:unittest5.gcno
        -:    0:Data:unittest5.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:#include <assert.h>
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8://#include "dominion.c"
        -:    9:#include "rngs.h"
        -:   10://#include "rngs.c"
        -:   11:
        -:   12:void checkTwo(int one, int two);
        -:   13:
        -:   14:
        1:   15:int main() {
        1:   16:	int preSilverHand, postSilverHand, preCopper, postCopper = 0, preGold, postGold = 0, preMine, postMine = 0, preSmithy, postSmithy = 0;
        -:   17:
        1:   18:	int seed = 4;
        1:   19:	int k[10] = { adventurer, council_room, feast, gardens, mine
        -:   20:			   , remodel, smithy, village, tribute, great_hall };
        -:   21:
        -:   22:	struct gameState G, G2;
        1:   23:	printf("----------------------------------------------------------------------------\n");
        1:   24:	printf("Begin Testing mineCardEffect():\n");
        -:   25:
        1:   26:	memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   27:	initializeGame(2, k, seed, &G); // initialize a new game
        -:   28:
        1:   29:	G.hand[0][0] = silver; //set silver for silver bug
        -:   30:	//G.hand[0][1] = copper;
        1:   31:	G.hand[0][4] = mine;
        1:   32:	preSilverHand = G.handCount[0];
        -:   33:
        1:   34:	mineCardEffect(0, silver, 4, &G, 0);
        -:   35:
        1:   36:	postSilverHand = G.handCount[0];
        -:   37:
        1:   38:	printf("Treasure range base case test ");
        1:   39:	checkTwo(postSilverHand, (preSilverHand - 1));
        -:   40:
        1:   41:	memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   42:	initializeGame(2, k, seed, &G2); // initialize a new game
        -:   43:
        1:   44:	G2.hand[0][0] = copper;
        1:   45:	G2.hand[0][1] = gold;
        1:   46:	G2.hand[0][2] = gold;
        1:   47:	G2.hand[0][3] = mine;
        1:   48:	G2.hand[0][4] = smithy;
        -:   49:
        1:   50:	preCopper = 1;
        1:   51:	preGold = 2;
        1:   52:	preMine = 1;
        1:   53:	preSmithy = 1;
        -:   54:
        1:   55:	mineCardEffect(0, silver, 3, &G2, 0);
        -:   56:
        -:   57:	int i;
        5:   58:	for (i = 0; i < G2.handCount[0]; i++)
        -:   59:	{
        4:   60:		if (G2.hand[0][i] == copper)
        -:   61:		{
    #####:   62:			postCopper++;
        -:   63:		}
        4:   64:		else if (G2.hand[0][i] == gold)
        -:   65:		{
        2:   66:			postGold++;
        -:   67:		}
        2:   68:		else if (G2.hand[0][i] == mine)
        -:   69:		{
        1:   70:			postMine++;
        -:   71:		}
        1:   72:		else if (G2.hand[0][i] == smithy)
        -:   73:		{
    #####:   74:			postSmithy++;
        -:   75:		}
        -:   76:	}
        -:   77:	
        1:   78:	printf("Copper handPos test ");
        1:   79:	checkTwo(postCopper, (preCopper - 1));
        -:   80:
        1:   81:	printf("Gold handPos test ");
        1:   82:	checkTwo(postGold, preGold);
        -:   83:
        1:   84:	printf("Mine handPos test ");
        1:   85:	checkTwo(postMine, (preMine - 1));
        -:   86:
        1:   87:	printf("Smithy handPos test ");
        1:   88:	checkTwo(preSmithy , postSmithy);
        -:   89:
        1:   90:	printf(" ");
        -:   91:
        1:   92:	printf("\n***ALL TESTS COMPLETE\n\n");
        -:   93:
        1:   94:	return 0;
        -:   95:}
        -:   96:
        5:   97:void checkTwo(int one, int two)
        -:   98:{
        5:   99:	if (one < two)
        -:  100:	{
    #####:  101:		printf("Passed \n");
        -:  102:	}
        5:  103:	else if (one > two)
        -:  104:	{
        3:  105:		printf("Failed \n");
        -:  106:	}
        -:  107:	else
        -:  108:	{
        2:  109:		printf("Passed \n");
        -:  110:	}
        -:  111:
        -:  112:	return;
        -:  113:}
