        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:#include <assert.h>
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8://#include "dominion.c"
        -:    9:#include "rngs.h"
        -:   10://#include "rngs.c"
        -:   11:
        -:   12:void checkTwo( int one , int two );
        -:   13:
        1:   14:int main() {
        -:   15:	int originalNumBuys, postNumBuys, supply,  postSupply1, postSupply2;
        -:   16:
        1:   17:	int seed = 4;
        1:   18:	int k[10] = { adventurer, council_room, feast, gardens, mine
        -:   19:			   , remodel, smithy, village, baron, great_hall };
        -:   20:	
        -:   21:	struct gameState G, newG;
        -:   22:	
        1:   23:	printf("----------------------------------------------------------------------------\n");
        1:   24:	printf("Begin Testing baronCardEffect():\n");
        -:   25:
        1:   26:	memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   27:	initializeGame(2, k, seed, &G); // initialize a new game
        -:   28:
        1:   29:	originalNumBuys = G.numBuys;
        1:   30:	cardEffectBaron(1, &G, 0);
        -:   31:
        1:   32:	postNumBuys = G.numBuys;
        -:   33:
        1:   34:	G.handCount[0] = 1;
        1:   35:	cardEffectBaron(1, &G, 0);
        -:   36:
        1:   37:	printf("Num Buys Test ");
        1:   38:	checkTwo(postNumBuys, (originalNumBuys + 1));
        -:   39:
        1:   40:	G.handCount[0] = 1;
        1:   41:	cardEffectBaron(1, &G, 0);
        -:   42:
        1:   43:	memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   44:	initializeGame(2, k, seed, &newG); // initialize a new game
        -:   45:
        1:   46:	newG.supplyCount[estate] = 2;
        1:   47:	newG.hand[0][0] = estate;
        1:   48:	supply = newG.supplyCount[estate];
        -:   49:
        1:   50:	cardEffectBaron(0, &newG, 0);
        1:   51:	postSupply1 = newG.supplyCount[estate];
        -:   52:
        1:   53:	printf("Estate Supply Test 1 ");
        1:   54:	checkTwo(postSupply1, (supply - 1));
        -:   55:
        1:   56:	newG.supplyCount[estate] = 1;
        1:   57:	supply = newG.supplyCount[estate];
        1:   58:	cardEffectBaron(0, &newG, 0);
        1:   59:	postSupply2 = newG.supplyCount[estate];
        -:   60:
        1:   61:	printf("Estate Supply Test 2 ");
        1:   62:	checkTwo(postSupply2, (supply - 1));
        -:   63:
        1:   64:	printf("\n***ALL TESTS COMPLETE\n\n");
        -:   65:
        1:   66:	return 0;
        -:   67:}
        -:   68:
        3:   69:void checkTwo(int one , int two)
        -:   70:{
        3:   71:	if (one < two )
        -:   72:	{
        3:   73:		printf("Passed \n");
        -:   74:	}
    #####:   75:	else if(one > two)
        -:   76:	{
    #####:   77:		printf("Failed \n");
        -:   78:	}
        -:   79:	else
        -:   80:	{
    #####:   81:		printf("Passed \n");
        -:   82:	}
        -:   83:
        -:   84:	return;
        -:   85:}
