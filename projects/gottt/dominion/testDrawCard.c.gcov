        -:    0:Source:testDrawCard.c
        -:    0:Graph:testdrawcard.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#define DEBUG 0
        -:    9:#define NOISY_TEST 1
        -:   10:
    #####:   11:int checkDrawCard(int p, struct gameState *post) {
        -:   12:    struct gameState pre;
    #####:   13:    memcpy (&pre, post, sizeof(struct gameState));
        -:   14:
        -:   15:    int r;
        -:   16:    //  printf ("drawCard PRE: p %d HC %d DeC %d DiC %d\n",
        -:   17:    //	  p, pre.handCount[p], pre.deckCount[p], pre.discardCount[p]);
        -:   18:
    #####:   19:    r = drawCard (p, post);
        -:   20:
        -:   21:    //printf ("drawCard POST: p %d HC %d DeC %d DiC %d\n",
        -:   22:    //      p, post->handCount[p], post->deckCount[p], post->discardCount[p]);
        -:   23:
    #####:   24:    if (pre.deckCount[p] > 0) {
    #####:   25:        pre.handCount[p]++;
    #####:   26:        pre.hand[p][pre.handCount[p]-1] = pre.deck[p][pre.deckCount[p]-1];
    #####:   27:        pre.deckCount[p]--;
    #####:   28:    } else if (pre.discardCount[p] > 0) {
    #####:   29:        memcpy(pre.deck[p], post->deck[p], sizeof(int) * pre.discardCount[p]);
    #####:   30:        memcpy(pre.discard[p], post->discard[p], sizeof(int)*pre.discardCount[p]);
    #####:   31:        pre.hand[p][post->handCount[p]-1] = post->hand[p][post->handCount[p]-1];
    #####:   32:        pre.handCount[p]++;
    #####:   33:        pre.deckCount[p] = pre.discardCount[p]-1;
    #####:   34:        pre.discardCount[p] = 0;
        -:   35:    }
        -:   36:
    #####:   37:    assert (r == 0);
        -:   38:
    #####:   39:    assert(memcmp(&pre, post, sizeof(struct gameState)) == 0);
    #####:   40:}
        -:   41:
    #####:   42:int main () {
        -:   43:
    #####:   44:	printf("/n/n/n HERE /n/n/n");
        -:   45:
        -:   46:    int i, n, r, p, deckCount, discardCount, handCount;
        -:   47:
    #####:   48:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   49:                 remodel, smithy, village, baron, great_hall
        -:   50:                };
        -:   51:
        -:   52:    struct gameState G;
        -:   53:
    #####:   54:    printf ("Testing drawCard.\n");
        -:   55:
    #####:   56:    printf ("RANDOM TESTS.\n");
        -:   57:
    #####:   58:    SelectStream(2);
    #####:   59:    PutSeed(3);
        -:   60:
    #####:   61:    for (n = 0; n < 2000; n++) {
    #####:   62:        for (i = 0; i < sizeof(struct gameState); i++) {
    #####:   63:            ((char*)&G)[i] = floor(Random() * 256);
        -:   64:        }
    #####:   65:        p = floor(Random() * 2);
    #####:   66:        G.deckCount[p] = floor(Random() * MAX_DECK);
    #####:   67:        G.discardCount[p] = floor(Random() * MAX_DECK);
    #####:   68:        G.handCount[p] = floor(Random() * MAX_HAND);
    #####:   69:        checkDrawCard(p, &G);
        -:   70:    }
        -:   71:
    #####:   72:    printf ("ALL TESTS OK\n");
        -:   73:
    #####:   74:    exit(0);
        -:   75:
        -:   76:}
