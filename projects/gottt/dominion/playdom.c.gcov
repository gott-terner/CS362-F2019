        -:    0:Source:playdom.c
        -:    0:Graph:playdom.gcno
        -:    0:Data:playdom.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <stdio.h>
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:
        1:    6:int main (int argc, char** argv) {
        -:    7:    struct gameState G;
        1:    8:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:    9:                 sea_hag, tribute, smithy
        -:   10:                };
        -:   11:
        1:   12:    printf ("Starting game.\n");
        -:   13:
        1:   14:    initializeGame(2, k, atoi(argv[1]), &G);
        -:   15:
        1:   16:    int money = 0;
        1:   17:    int smithyPos = -1;
        1:   18:    int adventurerPos = -1;
        1:   19:    int i=0;
        -:   20:
        1:   21:    int numSmithies = 0;
        1:   22:    int numAdventurers = 0;
        -:   23:
       38:   24:    while (!isGameOver(&G)) {
       36:   25:        money = 0;
       36:   26:        smithyPos = -1;
       36:   27:        adventurerPos = -1;
      216:   28:        for (i = 0; i < numHandCards(&G); i++) {
      180:   29:            if (handCard(i, &G) == copper)
       81:   30:                money++;
       99:   31:            else if (handCard(i, &G) == silver)
       33:   32:                money += 2;
       66:   33:            else if (handCard(i, &G) == gold)
       18:   34:                money += 3;
       48:   35:            else if (handCard(i, &G) == smithy)
        2:   36:                smithyPos = i;
       46:   37:            else if (handCard(i, &G) == adventurer)
        3:   38:                adventurerPos = i;
        -:   39:        }
        -:   40:
       36:   41:        if (whoseTurn(&G) == 0) {
       18:   42:            if (smithyPos != -1) {
        2:   43:                printf("0: smithy played from position %d\n", smithyPos);
        2:   44:                playCard(smithyPos, -1, -1, -1, &G);
        2:   45:                printf("smithy played.\n");
        2:   46:                money = 0;
        2:   47:                i=0;
       18:   48:                while(i<numHandCards(&G)) {
       14:   49:                    if (handCard(i, &G) == copper) {
        7:   50:                        playCard(i, -1, -1, -1, &G);
        7:   51:                        money++;
        -:   52:                    }
        7:   53:                    else if (handCard(i, &G) == silver) {
        1:   54:                        playCard(i, -1, -1, -1, &G);
        1:   55:                        money += 2;
        -:   56:                    }
        6:   57:                    else if (handCard(i, &G) == gold) {
        3:   58:                        playCard(i, -1, -1, -1, &G);
        3:   59:                        money += 3;
        -:   60:                    }
       14:   61:                    i++;
        -:   62:                }
        -:   63:            }
        -:   64:
       18:   65:            if (money >= 8) {
        5:   66:                printf("0: bought province\n");
        5:   67:                buyCard(province, &G);
        -:   68:            }
       13:   69:            else if (money >= 6) {
        6:   70:                printf("0: bought gold\n");
        6:   71:                buyCard(gold, &G);
        -:   72:            }
        7:   73:            else if ((money >= 4) && (numSmithies < 2)) {
        2:   74:                printf("0: bought smithy\n");
        2:   75:                buyCard(smithy, &G);
        2:   76:                numSmithies++;
        -:   77:            }
        5:   78:            else if (money >= 3) {
        4:   79:                printf("0: bought silver\n");
        4:   80:                buyCard(silver, &G);
        -:   81:            }
        -:   82:
       18:   83:            printf("0: end turn\n");
       18:   84:            endTurn(&G);
        -:   85:        }
        -:   86:        else {
       18:   87:            if (adventurerPos != -1) {
        3:   88:                printf("1: adventurer played from position %d\n", adventurerPos);
        3:   89:                playCard(adventurerPos, -1, -1, -1, &G);
        3:   90:                money = 0;
        3:   91:                i=0;
       27:   92:                while(i<numHandCards(&G)) {
       21:   93:                    if (handCard(i, &G) == copper) {
        8:   94:                        playCard(i, -1, -1, -1, &G);
        8:   95:                        money++;
        -:   96:                    }
       13:   97:                    else if (handCard(i, &G) == silver) {
        7:   98:                        playCard(i, -1, -1, -1, &G);
        7:   99:                        money += 2;
        -:  100:                    }
        6:  101:                    else if (handCard(i, &G) == gold) {
    #####:  102:                        playCard(i, -1, -1, -1, &G);
    #####:  103:                        money += 3;
        -:  104:                    }
       21:  105:                    i++;
        -:  106:                }
        -:  107:            }
        -:  108:
       18:  109:            if (money >= 8) {
        3:  110:                printf("1: bought province\n");
        3:  111:                buyCard(province, &G);
        -:  112:            }
       15:  113:            else if ((money >= 6) && (numAdventurers < 2)) {
        2:  114:                printf("1: bought adventurer\n");
        2:  115:                buyCard(adventurer, &G);
        2:  116:                numAdventurers++;
       13:  117:            } else if (money >= 6) {
        4:  118:                printf("1: bought gold\n");
        4:  119:                buyCard(gold, &G);
        -:  120:            }
        9:  121:            else if (money >= 3) {
        9:  122:                printf("1: bought silver\n");
        9:  123:                buyCard(silver, &G);
        -:  124:            }
       18:  125:            printf("1: endTurn\n");
        -:  126:
       18:  127:            endTurn(&G);
        -:  128:        }
        -:  129:    } // end of While
        -:  130:
        1:  131:    printf ("Finished game.\n");
        1:  132:    printf ("Player 0: %d\nPlayer 1: %d\n", scoreFor(0, &G), scoreFor(1, &G));
        -:  133:
        1:  134:    return 0;
        -:  135:}
